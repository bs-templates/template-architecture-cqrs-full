@using BAYSOFT.Core.Application.Default.Aggregates.Samples.Commands
@using BAYSOFT.Core.Application.Default.Aggregates.Samples.Queries
@using BAYSOFT.Core.Domain.Default.Aggregates.Samples.Entities
@using BAYSOFT.Presentations.APP.Blazor.Components.Helpers
@using MediatR
@using ModelWrapper.Extensions.GetModels
@using ModelWrapper.Extensions.Search
@using ModelWrapper.Extensions.Pagination
@using ModelWrapper.Extensions.Ordination
@page "/samples"
@rendermode InteractiveServer
@inject NavigationManager Navigation
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject IMediator Mediator

<MudTable
	ServerData="@(new Func<TableState, Task<TableData<Sample>>>(ServerReload))" @ref="table"
	FixedHeader="@fixed_header" FixedFooter="@fixed_footer" Height="@(fixed_header || fixed_footer ?"627px":"")"
		  MultiSelection="@multi_select" @bind-SelectedItems="selectedItems" @bind-SelectOnRowClick="@select_on_row_click"
	Dense="@dense" Hover="@hover" Bordered="@bordered" Striped="@striped">
	<ToolBarContent>
		<MudText Typo="Typo.h6">Samples</MudText>
		<MudSpacer />
		<MudTextField T="string" ValueChanged="@(s=>OnSearch(s))" Placeholder="Digite sua consulta aqui..." Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0" AutoFocus="true" Variant="Variant.Outlined"></MudTextField>
		<MudSpacer />
		<MudIconButton Icon="@Icons.Material.Filled.Add" Color="Color.Primary" Edge="Edge.Start" @onclick="Add" Title="Adicionar" />
		@if (selectedItems != null && selectedItems.Count == 1)
		{
			<MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Surface" Edge="Edge.Start" @onclick="Edit" Title="Editar" />
		}
		@if (selectedItems != null && selectedItems.Count > 0)
		{
			<MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" Edge="Edge.Start" Title="Excluír" @onclick="Delete" />
		}
	</ToolBarContent>
	<ColGroup>
		<col style="width: 48px;" />
	</ColGroup>
	<HeaderContent>
		<MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortLabel="Description" T="Sample">Descrição</MudTableSortLabel></MudTh>
	</HeaderContent>
	<RowTemplate>
		<MudTd DataLabel="Descrição">@context.Description</MudTd>
	</RowTemplate>
	<NoRecordsContent>
		<MudText>No matching records found</MudText>
	</NoRecordsContent>
	<LoadingContent>
		<MudText>Loading...</MudText>
	</LoadingContent>
	<PagerContent>
		<MudTablePager />
	</PagerContent>
</MudTable>

@code {
	private bool fixed_header = true;
	private bool fixed_footer = true;
	private bool multi_select = true;
	private bool dense = false;
	private bool hover = true;
	private bool striped = false;
	private bool bordered = false;
	private bool select_on_row_click = true;

	private string search = "";

	private GetSamplesByFilterQuery query;
	private MudTable<Sample> table;
	private HashSet<Sample> selectedItems;

	protected override async Task OnInitializedAsync()
	{
		query = new GetSamplesByFilterQuery();
	}

	/// <summary>
	/// Here we simulate getting the paged, filtered and ordered data from the server
	/// </summary>
	private async Task<TableData<Sample>> ServerReload(TableState state)
	{
		if (!string.IsNullOrWhiteSpace(search))
			query.SetSearch(search);
		else
			query.ClearSearch();

		query.SetOrdination(state.SortDirection.ToDescriptionString(), state.SortLabel);
		query.SetPagination(state.PageSize, state.Page + 1);

		var response = await Mediator.Send(query);

		selectedItems = new HashSet<Sample>();

		response.HandleNotifications(Snackbar, false);

		return new TableData<Sample>() { TotalItems = (int)response.ResultCount, Items = response.GetModels() };
	}

	private void OnSearch(string text)
	{
		search = text;
		table.ReloadServerData();
	}

	private void Add()
	{
		Navigation.NavigateTo("/samples/create");
	}

	private void Edit()
	{
		Navigation.NavigateTo($"/samples/{selectedItems.ToList().FirstOrDefault()?.Id}");
	}
	private async Task Delete()
	{
		var parameters = new DialogParameters<Dialog>();
		parameters.Add(x => x.ContentText, "Do you really want to delete these records? This process cannot be undone.");
		parameters.Add(x => x.ButtonConfirmText, "Delete");
		parameters.Add(x => x.Color, Color.Error);

		var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall, ClassBackground = "dialog-backdrop-blur" };

		var dialog = await DialogService.ShowAsync<Dialog>("Delete", parameters, options);
		var result = await dialog.Result;
		if (!result.Canceled)
		{
			foreach(var selectedItem in selectedItems.ToList())
			{
				var deleteCommand = new DeleteSampleCommand();
				deleteCommand.Project(m => m.Id = selectedItem.Id);
				var response = await Mediator.Send(deleteCommand);
				if (response.HandleNotifications(Snackbar))
				{
					StateHasChanged();
					await table.ReloadServerData();
				}
			}
		}
	}
}